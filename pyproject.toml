[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "entityidentity-installtest"
version = "1.0.0"
description = "Test suite and examples for the entityidentity package"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Peter Cotton"}
]
keywords = ["entity resolution", "company matching", "testing", "entityidentity"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "entityidentity>=0.0.2",
    "pytest>=7.0.0",
    "pandas>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest-cov",
    "black",
    "flake8",
]

[project.urls]
Homepage = "https://github.com/microprediction/entityidentity-installtest"
Repository = "https://github.com/microprediction/entityidentity-installtest"
"Bug Tracker" = "https://github.com/microprediction/entityidentity-installtest/issues"

[project.scripts]
entityidentity-test = "tests.run:main"
entityidentity-examples = "tests.examples:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "data: tests that verify data availability",
    "resolution: tests that verify entity resolution works",
    "integration: full integration tests",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.coverage.run]
source = ["tests"]
omit = ["tests/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

